Name

    NV_primitive_shading_rate

Name Strings

    GL_NV_primitive_shading_rate

Contact

    Pat Brown, NVIDIA Corporation (pbrown 'at' nvidia.com)

Contributors

    Jeff Bolz, NVIDIA

Status

    Shipping

Version

    Last Modified:      October 30, 2020
    Revision:           2

Dependencies

    This extension can be applied to OpenGL GLSL versions 4.50
    (#version 450) and higher.

    This extension can be applied to OpenGL ES ESSL versions 3.20
    (#version 320) and higher.

    This extension is written against the OpenGL Shading Language Specification,
    version 4.60.6, dated December 12, 2018.

    This extension interacts with NV_mesh_shader.

Overview

    This extension provides new GLSL built-in output variables to control the
    shading rate for each primitive.  gl_ShadingRateNV can be used in vertex,
    tessellation control, tessellation evaluation, geometry, and mesh shaders.
    gl_ShadingRatePerViewNV[] is an explicit multi-view version of
    gl_ShadingRateNV and can be used in mesh shaders.

    In the NV_shading_rate_image OpenGL API extension, applications can use
    the texels of a shading rate image to control the number of fragment
    shader invocations spawned for a particular neighborhood of covered
    pixels, which we refer to as the "shading rate".  In the original
    extension, the final shading rate used is a function of the texel fetched
    from the shading rate image and a per-viewport palette.  The new OpenGL
    API extension NV_primitive_shading_rate allows applications to use this
    new GLSL output to select a shading rate palette.

    Mapping to SPIR-V
    -----------------

    For informational purposes (non-normative), the following is an
    expected way for an implementation to map GLSL constructs to SPIR-V
    constructs supported by the SPV_NV_shading_rate extension:

    - gl_ShadingRateNV -> ShadingRateNV decorated variable
    - gl_ShadingRatePerViewNV -> ShadingRatePerViewNV decorated variable


Modifications to the OpenGL Shading Language Specification, Version 4.60

    Including the following line in a shader can be used to control the
    language features described in this extension:

      #extension GL_NV_primitive_shading_rate: <behavior>

    where <behavior> is as specified in section 3.3.

    New preprocessor #defines are added to the OpenGL Shading Language:

      #define GL_NV_primitive_shading_rate      1


    Modify Section 7.1.1, Vertex Shader Special Variables, p. 132

    (add to the list of built-in variables, first paragraph of the section)

      out gl_PerVertex {
        ...
        int gl_ShadingRateNV;
      };

    (add documentation of the new built-in variable, before gl_VertexID
     discussion in the middle of p. 133)

    The variable gl_ShadingRateNV allows a shader to write a primitive shading
    rate.  For each primitive, a primitive shading rate is selected from the
    value of one of the vertices of the primitive, as described in the OpenGL
    Specification.  The primitive shading rate affects the shading rate used for
    fragments generated by each primitive.


    Modify Section 7.1.2, Tessellation Control Shader Special Variables, p.
    134

    (add to the list of built-in variables, first paragraph of the section)

      out gl_PerVertex {
        ...
        int gl_ShadingRateNV;
      } gl_out[];

    (add discussion of the new output in the next-to-last paragraph of the
     section)

    gl_Position, gl_PointSize, gl_ClipDistance, gl_CullDistance, and
    gl_ShadingRateNV are used in the same fashion as the corresponding output
    variables in the vertex shader.


    Modify Section 7.1.3, Tessellation Evaluation Shader Special Variables, p.
    135

    (add to the list of built-in variables, first paragraph of the section)

      out gl_PerVertex {
        ...
        int gl_ShadingRateNV;
      };

    (add discussion of the new output in last paragraph of the section)

    gl_Position, gl_PointSize, gl_ClipDistance, gl_CullDistance, and
    gl_ShadingRateNV are used in the same fashion as the corresponding output
    variables in the vertex shader.


    Modify Section 7.1.4, Geometry Shader Special Variables, p.  136

    (add to the list of built-in variables, first paragraph of the section)

      out gl_PerVertex {
        ...
        int gl_ShadingRateNV;
      };

    (add discussion of the new output in the next-to-last paragraph, p. 136)

    gl_Position, gl_PointSize, gl_ClipDistance, gl_CullDistance, and
    gl_ShadingRateNV are used in the same fashion as the corresponding output
    variables in the vertex shader.


Dependencies on NV_mesh_shader

    If NV_mesh_shader is supported, add the following to the set of built-in
    per-primitive outputs supported by a mesh shader:

      perprimitiveNV out gl_MeshPerPrimitiveNV {
        ...
        int gl_ShadingRateNV;
        perviewNV int gl_ShadingRatePerViewNV[];
      } gl_MeshPrimitivesNV[];

    Add a description of the single-view output gl_ShadingRateNV:

      The per-primitive output gl_ShadingRateNV allows a shader to write a
      primitive shading rate.  For each primitive emitted by the mesh shader, a
      primitive shading rate is taken from the value of gl_ShadingRateNV and
      affects the shading rate used for fragments generated by each primitive.

    Modify the spec language discussing per-view mesh shader outputs:

      The mesh shader output block members gl_PositionPerViewNV[],
      gl_ClipDistancePerViewNV[][], gl_CullDistancePerViewNV[],
      gl_LayerPerViewNV[], glViewportMaskPerViewNV[][], and
      gl_ShadingRatePerViewNV[] are per-view versions of the single-view
      variables with equivalent names that lack the "PerViewNV" suffix:

        Per-View Variable               Single-View Variable
        ----------------------------    --------------------
        ...
        gl_ShadingRatePerViewNV[]       gl_ShadingRateNV

    As with all other pairs of per-view and single-view outputs, the per-view
    variable gl_ShadingRatePerViewNV[] is considered "array" and may not be
    statically assigned in a mesh shader that also statically assigns to the
    equivalent single-view variable, gl_ShadingRateNV.

    This extension does not modify any functionality of the task shader stage.

Dependencies on EXT_fragment_shading_rate

    If a shader enables both this extension and EXT_fragment_shading_rate, it
    is an error to statically assign values to either gl_ShadingRateNV or
    gl_ShadingRatePerViewNV if it also statically assigns values to
    gl_PrimitiveShadingRateEXT (from EXT_fragment_shading_rate).

Issues

    (1) How should we name this extension?

      RESOLVED:  We are calling this extension "NV_primitive_shading_rate"
      because it adds a new per-primitive shading rate to the variable-rate
      shading functionality added by NV_shading_rate_image.

    (2) Should we provide a "gl_ShadingRateNV" built-in input for tessellation
        control, tessellation evaluation, geometry, or fragment shaders?

      RESOLVED:  No.  The initial hardware implementing this extension does not
      support such inputs.  For fragment shaders, the final shading rate can be
      obtained from the gl_FragmentSizeNV and gl_InvocationsPerPixelNV built-ins
      provided by the NV_shading_rate_image extension.

    (3) How does this extension interact with the EXT_fragment_shading_rate
        GLSL extension and the KHR_fragment_shading_rate Vulkan API extension?

      RESOLVED:  Both extensions provide a similar capability -- the ability
      to write to a dedicated output specifying a per-primitive shading rate.
      On NVIDIA hardware, these two outputs use the same hardware resources so
      could not be written concurrently in the same shader even if both
      extensions were supported together.  The basic expectation here is that
      applications using the NV_shading_rate_image OpenGL or Vulkan API
      extensions should use this extension, while applications using the
      KHR_fragment_shading_rate Vulkan extension should use
      EXT_fragment_shading_rate instead of this extension.

      If this extension is used together with the KHR_fragment_shading_rate
      Vulkan API extension, the value written to gl_ShadingRateNV will be
      interpreted as though it were instead written to
      gl_PrimitiveShadingRateEXT.

Revision History

    Version 2, October 30, 2020 (pbrown)
    - Added issue comparing this extension to EXT_fragment_shading_rate.

    Version 1 (pbrown)
    - Internal revisions.
