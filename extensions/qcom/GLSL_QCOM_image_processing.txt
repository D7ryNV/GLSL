Name

    QCOM_image_processing

Name Strings

    GL_QCOM_image_processing

Contact

    Jeff Leger, Qualcomm Technologies Inc.  (jleger 'at' qti.qualcomm.com)

Contributors

    Jeff Leger, Qualcomm
    Wooyoung Kim, Qualcomm
    Ruihao Zhang, Qualcomm

Status

    Complete

Version

    Last Modified Date: April 12, 2023
    Revision: 1

Dependencies

    This extension can be applied to OpenGL GLSL versions 1.40
    (#version 140) and higher.

    This extension can be applied to OpenGL ES ESSL versions 3.10
    (#version 310) and higher.

    Requires GL_KHR_vulkan_glsl.

Overview

    GPUs commonly process images for a wide range of use-cases. These include enhancement
    of externally sourced images (i.e., camera image enhancement), post processing of
    GPU-rendered game content, image scaling, and image analysis (i.e., motion vector
    generation). In some cases, higher-order filtering kernels and advanced image algorithms
    are required.

    While such algorithms could be implemented in shader code generically using existing
    texture built-in functions, it requires many round-trips between the texture unit and
    shader unit. Some GPUs have dedicated HW shader instructions for such image processing
    tasks, enabling advanced functionality with simplified shader code.

    The extension exposes support for 4 new shader instructions:

    Weighted Texture Sample: This instruction performs a weighted texture sampling operation
    involving two images: the sampled image and the weight image. An MxN region of texels
    in the sampled image are convolved with an MxN set of scalar weights provided in the
    weight image. Large filter sizes up to 64x64 taps enable important use-cases like
    edge-detection, feature extraction, and anti-aliasing.

    Weighted Box Filter: This instruction performs weighted average of the texels within a
    screen-aligned box. The operation is similar to bi-linear filtering, except the region
    of texels is not limited to 2x2. The instruction includes a BoxSize parameter, with
    fractional box sizes up to [64.0, 64.0]. Similar to bi-linear filtering, the
    implementation computes a weighted average for all texels covered by the box, with the
    weight for each texel proportional covered area. Large box sizes up to 64x64 enable
    important use-cases like bulk mipmap generation and high quality single-pass image
    down-scaling with arbitrary scaling ratios (e.g. thumbnail generation).

    Block Matching SAD / Block Matching SSD: These instructions perform a block matching
    operation involving two images: the target image and reference image. Each instruction
    takes two sets of integer texture coordinates, and an integer BlockSize parameter. An MxN
    region of texels in the target image is compared with an MxN region in the reference image.
    The instruction returns a per-component error metric describing the difference between
    the two regions. The SAD returns the sum of the absolute errors and the SSD returns
    the sum of the squared differences.

    Mapping to SPIR-V
    -----------------

    For informational purposes (non-normative), the following is an
    expected way for an implementation to map GLSL constructs to SPIR-V
    constructs:

    textureWeightedQCOM      -> OpImageSampleWeightedQCOM
    textureBoxFilterQCOM     -> OpImageBoxFilterQCOM
    textureBlockMatchSADQCOM -> OpImageBlockMatchSSDQCOM
    textureBlockMatchSSDQCOM -> OpImageBlockMatchSADQCOM

    The <weight> texture operand of textureWeightedQCOM should be
    decorated with WeightTextureQCOM.  The decoration can
    help SPIR-V reflection tools provide this information back to
    application which in turn is helpful for the application to properly
    create the weight texture object in the client API.
    
    For similar reasons, the <target> and <reference> texture operands of
    textureBlockMatchSADQCOM and textureBlockMatchSSDQCOM should be decorated
    with BlockMatchTextureQCOM.
    
    The corresponding 3 SPIR-V capabilities are:
    
    TextureSampleWeightedQCOM   required by OpImageSampleWeightedQCOM
    TextureBoxFilterQCOM        required by OpImageBoxFilterQCOM
    TextureBlockMatchQCOM       required by OpImageBlockMatchSSDQCOM and OpImageBlockMatchSADQCOM

Modifications to the OpenGL GL Shading Language Specification, Version 1.40, dated 22 November 2009

    Including the following line in a shader can be used to control the
    language features described in this extension:

        #extension GL_QCOM_image_processing   : <behavior>

    where <behavior> is as specified in Section 3.3.

    New preprocessor #defines are added to the OpenGL Shading Language:

        #define GL_QCOM_image_processing     1

    Add to the table at the end of Subsection 8.9.2 "Texel Lookup Functions", add
    the following image processing functions.

    +------------------------------------+--------------------------------------------+
    | Syntax                             | Description                                |
    +------------------------------------+--------------------------------------------+
    |   vec4 textureWeightedQCOM(        | weighted sample operation multiplies       |
    |       sampler2D tex,               | a 2D kernel of filter weights with a corr- |
    |       vec2      P,                 | esponding region of sampled texels and     |
    |       sampler2DArray weight)       | sums the results to produce the output     |
    |                                    | value.                                     |
    +------------------------------------+--------------------------------------------+
    |   vec4 textureBoxFilterQCOM(       | Linear operation taking average of pixels  |
    |       sampler2D tex,               | within the spatial region described by     |
    |       vec2       P,                | boxSize.  The box is centered at coordinate|
    |       vec2       boxSize)          | P and has width and height of boxSize.x    |
    |                                    | and boxSize.y.                             |
    +------------------------------------+--------------------------------------------+
    |   vec4 textureBlockMatchSADQCOM(   | Block matching operation measures the      |
    |       sampler2D target             | correlation (or similarity) of the target  |
    |       uvec2     targetCoord,       | block and reference block.  targetCoord    |
    |       sampler2D reference,         | and refCoord specify the bottom-left corner|
    |       uvec2     refCoord,          | of the block in target and reference       |
    |       uvec2     blockSize)         | images. The error metric is the Sum of     |
    |                                    | Absolute Differences (SAD).                |
    +------------------------------------+--------------------------------------------+
    |   vec4 textureBlockMatchSSDQCOM(   | Block matching operation measures the      |
    |       sampler2D target             | correlation (or similarity) of the target  |
    |       uvec2     targetCoord,       | block and reference block.  TargetCoord    |
    |       sampler2D reference,         | and refCoord specify the bottom-left corner|
    |       uvec2     refCoord,          | of the block in target and reference       |
    |       uvec2     blockSize)         | images. The error metric is the Sum of     |
    |                                    | Square Differences (SSD).                  |
    +------------------------------------+--------------------------------------------+

    * The textureBlockMatch* functions return a per-component metric that reflects
    the correlation of the target and reference blocks.  If the blocks match exactly
    the value 0 is returned.  The detailed description of the SAD and SSD metrics
    is documented in the "Block Matching" section of the "Image Operations" chapter
    of the Vulkan specification.

    * target and reference specify the two input textures. If
    the same block from one texture is going to be used repeatedly across multiple
    instructions, that texture should be specified as the referenceTexture.

    * targetCoord and referenceCoord specify the texture coordinates (in texels)
    of the bottom-left corner of each block.

    * blockSize specifies the size (in texels) of the blocks to be compared.


Modifications to the OpenGL ES Shading Language Specification, Version 3.10, dated 29 January 2016

* The changes for OpenGL ES are identical to those above for OpenGL GL.

Restrictions:
    It is a compile-time error if the sampler variable used as the <weight> parameter
    in function textureWeightedQCOM is used in any other context in the shader.
    
    It is a compile-time error if the sampler variable used as the <target> or <reference>
    parameter in functions textureBlockMatchSADQCOM or textureBlockMatchSSDQCOM is used in
    any other context in the shader.

Issues
    None.
  
Revision History

    Rev.  Date           Author    Changes
    ----  -----------    --------  --------------------------------------------
    1     12-Apr-2023    jleger    Initial version
 
